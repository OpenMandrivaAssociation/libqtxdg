From 707f4cb5c7f4c77dbcb4ae02d48f9dab4512aa45 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lu=C3=ADs=20Pereira?= <luis.artur.pereira@gmail.com>
Date: Thu, 26 Feb 2015 04:11:24 -0800
Subject: [PATCH 18/27] Qt5: Use Qt5 private headers

Also installs our private header (qiconloader_p.h). This way QIconLoader
can be accessed by user code.
By accessing Qt5 private headers we can access functionality that was
previously not accessible (QGuiApplicationPrivate).

We also install our own private header. This way the user can access our
QIconLoader if necessary. Accessing QIconLoader is for special uses cases,
so we "hide" it's header under ${QTXDG_PRIVATE_INCLUDE_DIR}.
---
 CMakeLists.txt               | 59 ++++++++++++++++++++------
 cmake/qt5xdg-config.cmake.in | 54 ++++++++++++++++++++++++
 cmake/qtxdg-config.cmake.in  |  1 +
 qiconfix/qhexstring_p.h      | 98 --------------------------------------------
 qiconfix/qiconloader.cpp     | 28 ++++---------
 qiconfix/qiconloader_p.h     |  4 +-
 6 files changed, 112 insertions(+), 132 deletions(-)
 create mode 100644 cmake/qt5xdg-config.cmake.in
 delete mode 100644 qiconfix/qhexstring_p.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a69aa4c..c0e9e79 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -62,7 +62,11 @@ if (USE_QT5)
     set(QTXDGX_PKG_CONFIG_DESCRIPTION "Qt5Xdg, a Qt5 implementation of XDG standards")
     set(QTXDGX_PKG_CONFIG_REQUIRES "Qt5Core, Qt5Xml, Qt5Widgets")
 
-    include_directories(${Qt5Widgets_INCLUDE_DIRS} ${Qt5Xml_INCLUDE_DIRS})
+    include_directories(
+        ${Qt5Widgets_INCLUDE_DIRS}
+        ${Qt5Gui_PRIVATE_INCLUDE_DIRS}
+        ${Qt5Xml_INCLUDE_DIRS}
+    )
     add_definitions(${Qt5Core_DEFINITIONS})
 #    set(CMAKE_CXX_FLAGS
 #        "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}"
@@ -161,7 +165,7 @@ set(libqtxdg_MOCS
 )
 
 if (USE_QT5)
-    list(APPEND libqtxdg_PRIVATE_H_FILES qiconfix/qiconloader_p.h)
+    list(APPEND libqtxdg_PRIVATE_INSTALLABLE_H_FILES qiconfix/qiconloader_p.h)
     list(APPEND libqtxdg_CPP_FILES qiconfix/qiconloader.cpp)
 else()
     list(APPEND libqtxdg_PRIVATE_H_FILES qiconfix/qiconloader_p_qt4.h)
@@ -213,11 +217,21 @@ set(QTXDG_PATCH_VERSION ${PATCH_VERSION})
 
 # In tree compilation ......................
 set(QTXDG_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_BINARY_DIR}")
-configure_file(
-    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qtxdg-config.cmake.in
-    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${QTXDGX_FILE_NAME}-config.cmake
-    @ONLY
-)
+
+if (USE_QT5)
+    set(QTXDG_PRIVATE_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/qiconfix")
+    configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qt5xdg-config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/cmake/${QTXDGX_FILE_NAME}-config.cmake
+        @ONLY
+    )
+else()
+    configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qtxdg-config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/cmake/${QTXDGX_FILE_NAME}-config.cmake
+        @ONLY
+    )
+endif()
 
 configure_file(
     ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${QTXDGX_FILE_NAME}_use.cmake
@@ -228,11 +242,20 @@ configure_file(
 # Instalable ...............................
 set(QTXDG_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/${QTXDGX_FILE_NAME})
 
-configure_file(
-    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qtxdg-config.cmake.in
-    ${CMAKE_CURRENT_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake
-    @ONLY
-)
+if (USE_QT5)
+    set(QTXDG_PRIVATE_INCLUDE_DIR ${QTXDG_INCLUDE_DIR}/${QTXDG_VERSION_STRING})
+    configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qt5xdg-config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake
+        @ONLY
+    )
+else()
+    configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/qtxdg-config.cmake.in
+        ${CMAKE_CURRENT_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake
+        @ONLY
+    )
+endif()
 
 #**********************************************************
 
@@ -253,6 +276,8 @@ endif (NOT CMAKE_BUILD_TYPE)
 add_library(${QTXDGX_LIBRARY_NAME} SHARED
     ${libqtxdg_PUBLIC_H_FILES}
     ${libqtxdg_PRIVATE_H_FILES}
+    ${libqtxdg_PRIVATE_INSTALLABLE_H_FILES}
+    ${libqtxdg_PRIVATE_H_FILES}
     ${libqtxdg_CPP_FILES}
     ${libqtxdg_CXX_FILES}
 )
@@ -274,6 +299,15 @@ create_portable_headers(libqtxdg_PORTABLE_HEADERS ${libqtxdg_PUBLIC_CLASSES})
 
 install(TARGETS ${QTXDGX_LIBRARY_NAME} DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(FILES ${libqtxdg_PUBLIC_H_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${QTXDGX_FILE_NAME})
+
+if (USE_QT5)
+    install(FILES
+            ${libqtxdg_PRIVATE_INSTALLABLE_H_FILES}
+        DESTINATION
+            "${QTXDG_PRIVATE_INCLUDE_DIR}/private/qtxdg"
+    )
+endif()
+
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${QTXDGX_FILE_NAME}-config.cmake DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME})
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/${QTXDGX_FILE_NAME}_use.cmake DESTINATION ${CMAKE_INSTALL_DATADIR}/cmake/${QTXDGX_FILE_NAME})
 install(FILES ${libqtxdg_PORTABLE_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${QTXDGX_FILE_NAME})
@@ -306,6 +340,7 @@ configure_file(
 add_custom_target(uninstall
     COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
 
+
 # building tarball with CPack -------------------------------------------------
 include (InstallRequiredSystemLibraries)
 set (CPACK_PACKAGE_VERSION_MAJOR ${MAJOR_VERSION})
diff --git a/cmake/qt5xdg-config.cmake.in b/cmake/qt5xdg-config.cmake.in
new file mode 100644
index 0000000..83f316b
--- /dev/null
+++ b/cmake/qt5xdg-config.cmake.in
@@ -0,0 +1,54 @@
+# - Find the QtXdg include and library dirs and define a some macros
+#
+# The module defines the following variables
+#  QTXDG_FOUND         - Set to TRUE if all of the above has been found
+#
+#  QTXDG_INCLUDE_DIR   - The QtXdg include directory
+#
+#  QTXDG_INCLUDE_DIRS  - The QtXdg lib and it's dependencies include directories
+#
+#  QTXDG_LIBRARY_DIRS  - The QtXdg lib and it's dependencies linker search paths
+#
+#  QTXDG_LIBRARY       - The QtXdg library itself
+#  QTXDG_LIBRARIES     - The QtXdg library and all it's dependencies
+#
+#  QTXDG_USE_FILE      - The variable QTXDG_USE_FILE is set which is the path
+#                        to a CMake file that can be included to compile qtxdg
+#                        applications and libraries. It sets up the compilation
+#                        environment for include directories and populates a
+#                        QTXDG_LIBRARIES variable.
+#
+# QTXDG_QT_LIBRARIES   - The QtXdg Qt dependencies libraries
+#
+# Typical usage:
+#    option(USE_QT5 "Build using Qt5. Default off" OFF)
+#    if (USE_QT5)
+#        find_package(QT5XDG)
+#    else()
+#        find_package(QTXDG)
+#    endif()
+#
+#    include(${QTXDG_USE_FILE})
+#    add_executable(use-qtxdg main.cpp)
+#    target_link_libraries(use-qtxdg ${QTXDG_LIBRARIES})
+
+set(QTXDG_INCLUDE_DIR   @QTXDG_INCLUDE_DIR@)
+set(QTXDG_LIBRARY       @QTXDGX_LIBRARY_NAME@)
+set(QTXDG_PRIVATE_INCLUDE_DIR @QTXDG_PRIVATE_INCLUDE_DIR@ CACHE PATH "Qt5Xdg private include dir")
+
+set(QTXDG_LIBRARIES     ${QTXDG_LIBRARY})
+set(QTXDG_INCLUDE_DIRS  ${QTXDG_INCLUDE_DIR})
+set(QTXDG_PRIVATE_INCLUDE_DIRS ${QTXDG_PRIVATE_INCLUDE_DIR})
+
+set(QTXDG_LIBRARY_DIRS  @CMAKE_INSTALL_FULL_LIBDIR@)
+
+set(QTXDG_USE_FILE      ${CMAKE_CURRENT_LIST_DIR}/@QTXDGX_FILE_NAME@_use.cmake)
+set(QTXDG_FOUND 1)
+set(QTXDG_QTMIMETYPES   @USE_QTMIMETYPES@)
+
+set(QTXDG_MAJOR_VERSION @QTXDG_MAJOR_VERSION@)
+set(QTXDG_MINOR_VERSION @QTXDG_MINOR_VERSION@)
+set(QTXDG_PATCH_VERSION @QTXDG_PATCH_VERSION@)
+set(QTXDG_VERSION @QTXDG_MAJOR_VERSION@.@QTXDG_MINOR_VERSION@.@QTXDG_PATCH_VERSION@)
+
+mark_as_advanced(QTXDG_LIBRARY QTXDG_INCLUDE_DIR QTXDG_PRIVATE_INCLUDE_DIR)
diff --git a/cmake/qtxdg-config.cmake.in b/cmake/qtxdg-config.cmake.in
index 21a9dce..b25dc23 100644
--- a/cmake/qtxdg-config.cmake.in
+++ b/cmake/qtxdg-config.cmake.in
@@ -33,6 +33,7 @@
 #    target_link_libraries(use-qtxdg ${QTXDG_LIBRARIES})
 
 set(QTXDG_INCLUDE_DIR   @QTXDG_INCLUDE_DIR@)
+set(QTXDG_PRIVATE_INCLUDE_DIR @QTXDG_PRIVATE_INCLUDE_DIR@)
 set(QTXDG_LIBRARY       @QTXDGX_LIBRARY_NAME@)
 
 set(QTXDG_LIBRARIES     ${QTXDG_LIBRARY})
diff --git a/qiconfix/qhexstring_p.h b/qiconfix/qhexstring_p.h
deleted file mode 100644
index 5f54f05..0000000
--- a/qiconfix/qhexstring_p.h
+++ /dev/null
@@ -1,98 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtCore/qglobal.h>
-#include <QtCore/qpoint.h>
-#include <QtCore/qstring.h>
-#include <QtGui/qpolygon.h>
-#include <QtCore/qstringbuilder.h>
-
-#ifndef QHEXSTRING_P_H
-#define QHEXSTRING_P_H
-
-//
-//  W A R N I N G
-//  -------------
-//
-// This file is not part of the Qt API.  It exists purely as an
-// implementation detail.  This header file may change from version to
-// version without notice, or even be removed.
-//
-// We mean it.
-//
-
-QT_BEGIN_NAMESPACE
-
-// internal helper. Converts an integer value to an unique string token
-template <typename T>
-        struct HexString
-{
-    inline HexString(const T t)
-        : val(t)
-    {}
-
-    inline void write(QChar *&dest) const
-    {
-        const ushort hexChars[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
-        const char *c = reinterpret_cast<const char *>(&val);
-        for (uint i = 0; i < sizeof(T); ++i) {
-            *dest++ = hexChars[*c & 0xf];
-            *dest++ = hexChars[(*c & 0xf0) >> 4];
-            ++c;
-        }
-    }
-    const T val;
-};
-
-// specialization to enable fast concatenating of our string tokens to a string
-template <typename T>
-        struct QConcatenable<HexString<T> >
-{
-    typedef HexString<T> type;
-    enum { ExactSize = true };
-    static int size(const HexString<T> &) { return sizeof(T) * 2; }
-    static inline void appendTo(const HexString<T> &str, QChar *&out) { str.write(out); }
-    typedef QString ConvertTo;
-};
-
-QT_END_NAMESPACE
-
-#endif // QHEXSTRING_P_H
diff --git a/qiconfix/qiconloader.cpp b/qiconfix/qiconloader.cpp
index 193e2b8..5a868c9 100644
--- a/qiconfix/qiconloader.cpp
+++ b/qiconfix/qiconloader.cpp
@@ -33,12 +33,12 @@
 #ifndef QT_NO_ICON
 #include "qiconloader_p.h"
 
-//#include <private/qguiapplication_p.h>
-//#include <private/qicon_p.h>
+#include <private/qguiapplication_p.h>
+#include <private/qicon_p.h>
 
 #include <QtGui/QIconEnginePlugin>
 #include <QtGui/QPixmapCache>
-//#include <QtGui/qpa/qplatformtheme.h>
+#include <qpa/qplatformtheme.h>
 #include <QtGui/QIconEngine>
 #include <QtGui/QPalette>
 #include <QtCore/QList>
@@ -46,14 +46,12 @@
 #include <QtCore/QDir>
 #include <QtCore/QSettings>
 #include <QtGui/QPainter>
-#include <QApplication>
-#include <QLatin1Literal>
 
-//#ifdef Q_WS_MAC
-//#include <private/qt_cocoa_helpers_mac_p.h>
-//#endif
+#ifdef Q_WS_MAC
+#include <private/qt_cocoa_helpers_mac_p.h>
+#endif
 
-#include "qhexstring_p.h"
+#include <private/qhexstring_p.h>
 
 //QT_BEGIN_NAMESPACE
 
@@ -62,16 +60,13 @@ namespace QtXdg {
 Q_GLOBAL_STATIC(QIconLoader, iconLoaderInstance)
 
 /* Theme to use in last resort, if the theme does not have the icon, neither the parents  */
-
 static QString fallbackTheme()
 {
-#if 0
     if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
         const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconFallbackThemeName);
         if (themeHint.isValid())
             return themeHint.toString();
     }
-#endif
     return QString("hicolor");
 }
 
@@ -85,25 +80,21 @@ QIconLoader::QIconLoader() :
 
 static inline QString systemThemeName()
 {
-#if 0
     if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
         const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconThemeName);
         if (themeHint.isValid())
             return themeHint.toString();
     }
-#endif
     return QIcon::themeName();
 }
 
 static inline QStringList systemIconSearchPaths()
 {
-#if 0
     if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
         const QVariant themeHint = theme->themeHint(QPlatformTheme::IconThemeSearchPaths);
         if (themeHint.isValid())
             return themeHint.toStringList();
     }
-#endif
     return QIcon::themeSearchPaths();
 }
 
@@ -118,8 +109,7 @@ void QIconLoader::ensureInitialized()
 
         Q_ASSERT(qApp);
 
-//        m_systemTheme = systemThemeName();
-        m_systemTheme = QIcon::themeName();
+        m_systemTheme = systemThemeName();
 
         if (m_systemTheme.isEmpty())
             m_systemTheme = fallbackTheme();
@@ -615,10 +605,8 @@ QPixmap PixmapEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State st
             cachedPixmap = basePixmap.scaled(actualSize, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);
         else
             cachedPixmap = basePixmap;
-#if 0
         if (QGuiApplication *guiApp = qobject_cast<QGuiApplication *>(qApp))
             cachedPixmap = static_cast<QGuiApplicationPrivate*>(QObjectPrivate::get(guiApp))->applyQIconStyleHelper(mode, cachedPixmap);
-#endif
         QPixmapCache::insert(key, cachedPixmap);
     }
     return cachedPixmap;
diff --git a/qiconfix/qiconloader_p.h b/qiconfix/qiconloader_p.h
index 14701e2..6610ed4 100644
--- a/qiconfix/qiconloader_p.h
+++ b/qiconfix/qiconloader_p.h
@@ -51,8 +51,8 @@
 #include <QtGui/QIcon>
 #include <QtGui/QIconEngine>
 #include <QtGui/QPixmapCache>
-//#include <private/qicon_p.h>
-//#include <private/qfactoryloader_p.h>
+#include <private/qicon_p.h>
+#include <private/qfactoryloader_p.h>
 #include <QtCore/QHash>
 #include <QtCore/QVector>
 #include <QtCore/QTypeInfo>
-- 
1.9.0

