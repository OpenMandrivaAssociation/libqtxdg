From 90775840a6223540e93cacc9ca41b2e896bfae5b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lu=C3=ADs=20Pereira?= <luis.artur.pereira@gmail.com>
Date: Fri, 6 Mar 2015 06:21:33 -0800
Subject: [PATCH 21/27] Replace empty quotes by QString()

It's faster.
---
 xdgaction.cpp               | 4 ++--
 xdgdesktopfile.h            | 2 +-
 xdgdirs.h                   | 6 +++---
 xdgmenu.cpp                 | 2 +-
 xdgmenuapplinkprocessor.cpp | 4 ++--
 xdgmenureader.h             | 2 +-
 xdgmenurules.cpp            | 2 +-
 xdgmenuwidget.cpp           | 2 +-
 xdgmenuwidget.h             | 4 ++--
 xmlhelper.h                 | 4 ++--
 10 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/xdgaction.cpp b/xdgaction.cpp
index 3e56c36..29c1712 100644
--- a/xdgaction.cpp
+++ b/xdgaction.cpp
@@ -127,8 +127,8 @@ void XdgAction::load(const XdgDesktopFile& desktopFile)
     }
     else
     {
-        setText("");
-        setToolTip("");
+        setText(QString());
+        setToolTip(QString());
         setIcon(QIcon());
     }
 }
diff --git a/xdgdesktopfile.h b/xdgdesktopfile.h
index b71628e..65d2123 100644
--- a/xdgdesktopfile.h
+++ b/xdgdesktopfile.h
@@ -160,7 +160,7 @@ public:
     bool startDetached(const QStringList& urls) const;
 
     //! This function is provided for convenience. It's equivalent to calling startDetached(QStringList(url)).
-    bool startDetached(const QString& url="") const;
+    bool startDetached(const QString& url = QString()) const;
 
     /*! A Exec value consists of an executable program optionally followed by one or more arguments.
         This function expands this arguments and returns command line string parts.
diff --git a/xdgdirs.h b/xdgdirs.h
index 0968761..ea7d4f1 100644
--- a/xdgdirs.h
+++ b/xdgdirs.h
@@ -95,7 +95,7 @@ public:
      *
      * If the postfix is not empty it will append to end of each returned directory.
      */
-    static QStringList dataDirs(const QString &postfix = "");
+    static QStringList dataDirs(const QString &postfix = QString());
 
 
     /*! @brief Returns a list of all directories that corresponds to the $XDG_CONFIG_DIRS.
@@ -105,7 +105,7 @@ public:
      *
      * If the postfix is not empty it will append to end of each returned directory.
      */
-    static QStringList configDirs(const QString &postfix = "");
+    static QStringList configDirs(const QString &postfix = QString());
 
 
     /*! @brief Returns the path to the directory that corresponds to the $XDG_CACHE_HOME.
@@ -141,7 +141,7 @@ public:
       * Note: this does not include the user's autostart directory
       * @sa autostartHome()
       */
-     static QStringList autostartDirs(const QString &postfix = "");
+     static QStringList autostartDirs(const QString &postfix = QString());
 };
 
 #endif // QTXDG_XDGDIRS_H
diff --git a/xdgmenu.cpp b/xdgmenu.cpp
index d5efcbf..9e538e8 100644
--- a/xdgmenu.cpp
+++ b/xdgmenu.cpp
@@ -584,7 +584,7 @@ void XdgMenuPrivate::processDirectoryEntries(QDomElement& element, const QString
 
     element.setAttribute("title", element.attribute("name"));
 
-    MutableDomElementIterator i(element, "");
+    MutableDomElementIterator i(element, QString());
     i.toBack();
     while(i.hasPrevious())
     {
diff --git a/xdgmenuapplinkprocessor.cpp b/xdgmenuapplinkprocessor.cpp
index 0e8f024..c62e068 100644
--- a/xdgmenuapplinkprocessor.cpp
+++ b/xdgmenuapplinkprocessor.cpp
@@ -220,7 +220,7 @@ void XdgMenuApplinkProcessor::fillAppFileInfoList()
         while(i.hasPrevious())
         {
             QDomElement e = i.previous();
-            findDesktopFiles(e.text(), "");
+            findDesktopFiles(e.text(), QString());
             mElement.removeChild(e);
         }
     }
@@ -274,7 +274,7 @@ void XdgMenuApplinkProcessor::findDesktopFiles(const QString& dirName, const QSt
  ************************************************/
 void XdgMenuApplinkProcessor::createRules()
 {
-    MutableDomElementIterator i(mElement, "");
+    MutableDomElementIterator i(mElement, QString());
     while(i.hasNext())
     {
         QDomElement e = i.next();
diff --git a/xdgmenureader.h b/xdgmenureader.h
index 529893d..1962cfb 100644
--- a/xdgmenureader.h
+++ b/xdgmenureader.h
@@ -42,7 +42,7 @@ public:
     explicit XdgMenuReader(XdgMenu* menu, XdgMenuReader*  parentReader = 0, QObject *parent = 0);
     virtual ~XdgMenuReader();
 
-    bool load(const QString& fileName, const QString& baseDir = "");
+    bool load(const QString& fileName, const QString& baseDir = QString());
     QString fileName() const { return mFileName; }
     QString errorString() const { return mErrorStr; }
     QDomDocument& xml() { return mXml; }
diff --git a/xdgmenurules.cpp b/xdgmenurules.cpp
index 2bd72c3..d873b5e 100644
--- a/xdgmenurules.cpp
+++ b/xdgmenurules.cpp
@@ -69,7 +69,7 @@ XdgMenuRuleOr::XdgMenuRuleOr(const QDomElement& element, QObject* parent) :
     XdgMenuRule(element, parent)
 {
     //qDebug() << "Create OR rule";
-    DomElementIterator iter(element, "");
+    DomElementIterator iter(element, QString());
 
     while(iter.hasNext())
     {
diff --git a/xdgmenuwidget.cpp b/xdgmenuwidget.cpp
index 162526d..1f12605 100644
--- a/xdgmenuwidget.cpp
+++ b/xdgmenuwidget.cpp
@@ -219,7 +219,7 @@ void XdgMenuWidgetPrivate::buildMenu()
         first = q->actions().last();
 
 
-    DomElementIterator it(mXml, "");
+    DomElementIterator it(mXml, QString());
     while(it.hasNext())
     {
         QDomElement xml = it.next();
diff --git a/xdgmenuwidget.h b/xdgmenuwidget.h
index 585619b..53e24e6 100644
--- a/xdgmenuwidget.h
+++ b/xdgmenuwidget.h
@@ -49,7 +49,7 @@ class XdgMenuWidgetPrivate;
     bool res = xdgMenu.read();
     if (res)
     {
-        XdgMenuWidget menu(xdgMenu, "", this);
+        XdgMenuWidget menu(xdgMenu, QString(), this);
         menu.exec(QCursor::pos());
     }
     else
@@ -64,7 +64,7 @@ class QTXDG_API XdgMenuWidget : public QMenu
     Q_OBJECT
 public:
     /// Constructs a menu for root documentElement in xdgMenu with some text and parent.
-    XdgMenuWidget(const XdgMenu& xdgMenu, const QString& title="", QWidget* parent=0);
+    XdgMenuWidget(const XdgMenu& xdgMenu, const QString& title = QString(), QWidget* parent=0);
 
     /// Constructs a menu for menuElement with parent.
     explicit XdgMenuWidget(const QDomElement& menuElement, QWidget* parent=0);
diff --git a/xmlhelper.h b/xmlhelper.h
index 5e5c90c..571dbb9 100644
--- a/xmlhelper.h
+++ b/xmlhelper.h
@@ -37,7 +37,7 @@
 class QTXDG_API DomElementIterator
 {
 public:
-    explicit DomElementIterator(const QDomNode& parentNode, const QString& tagName="")
+    explicit DomElementIterator(const QDomNode& parentNode, const QString& tagName = QString())
     {
         mTagName = tagName;
         mParent = parentNode;
@@ -96,7 +96,7 @@ private:
 class MutableDomElementIterator
 {
 public:
-    explicit MutableDomElementIterator(QDomNode& parentNode, const QString& tagName="")
+    explicit MutableDomElementIterator(QDomNode& parentNode, const QString& tagName = QString())
     {
         mTagName = tagName;
         mParent = parentNode;
-- 
1.9.0

